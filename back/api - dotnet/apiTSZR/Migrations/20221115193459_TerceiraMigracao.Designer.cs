// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using apiTSZR.Data;

#nullable disable

namespace apiTSZR.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221115193459_TerceiraMigracao")]
    partial class TerceiraMigracao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("apiTSZR.Models.AssistenciaTec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Loja")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("loja");

                    b.HasKey("Id");

                    b.ToTable("assistencia_tecnica");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Loja = "Remakker"
                        },
                        new
                        {
                            Id = 2,
                            Loja = "Recuperador Tecnologia"
                        },
                        new
                        {
                            Id = 3,
                            Loja = "Cell Week"
                        });
                });

            modelBuilder.Entity("apiTSZR.Models.Avaliacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Avaliar")
                        .IsRequired()
                        .HasColumnType("VARCHAR(3)")
                        .HasColumnName("avaliacao");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("avaliacoes");
                });

            modelBuilder.Entity("apiTSZR.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("cargo");

                    b.Property<string>("Cnpj")
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("Cpf")
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("email");

                    b.Property<int>("EnderecoId")
                        .HasColumnType("int");

                    b.Property<string>("Equipamento")
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("equipamento_doado");

                    b.Property<string>("Escolha")
                        .IsRequired()
                        .HasColumnType("VARCHAR(14)")
                        .HasColumnName("escolha");

                    b.Property<string>("Explicacao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("texto_explicativo");

                    b.Property<string>("Instituicao")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("instituicao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(70)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("telefone");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId")
                        .IsUnique();

                    b.ToTable("clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cpf = "33344433321",
                            Email = "robertSil@gmail.com",
                            EnderecoId = 1,
                            Escolha = "beneficio",
                            Explicacao = "preciso porque sou estudante",
                            Nome = "Roberto Silva",
                            Telefone = "11987435467"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "Gerente",
                            Cnpj = "11222111222133",
                            Email = "wallacetrab@hotmail.com",
                            EnderecoId = 2,
                            Equipamento = "Computador",
                            Escolha = "doador",
                            Explicacao = "estou aqui para doar 2 computadores que não usamos mais",
                            Instituicao = "Hospital Nogueira",
                            Nome = "Fracisco Wallace",
                            Telefone = "21987224351"
                        });
                });

            modelBuilder.Entity("apiTSZR.Models.Disponivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipamentoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentoId");

                    b.ToTable("equipamentos_disponiveis");
                });

            modelBuilder.Entity("apiTSZR.Models.Doacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EquipamentoId")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipamentoId")
                        .IsUnique();

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.ToTable("doacoes");
                });

            modelBuilder.Entity("apiTSZR.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("VARCHAR(8)")
                        .HasColumnName("cep");

                    b.Property<string>("PontoRef")
                        .IsRequired()
                        .HasColumnType("VARCHAR(70)")
                        .HasColumnName("ponto_referencia");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)")
                        .HasColumnName("endereco");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("uf");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cep = "23430654",
                            PontoRef = "mercearia do Jorge",
                            Rua = "Rua das Flores",
                            Uf = "SP"
                        },
                        new
                        {
                            Id = 2,
                            Cep = "41264100",
                            PontoRef = "Terminal Alfaiate",
                            Rua = "Av dos Alfaiates",
                            Uf = "RJ"
                        });
                });

            modelBuilder.Entity("apiTSZR.Models.Equipamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("int");

                    b.Property<string>("Pecas")
                        .IsRequired()
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("pecas");

                    b.Property<int>("TecId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(10,2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.HasIndex("TecId");

                    b.ToTable("equipamentos");
                });

            modelBuilder.Entity("apiTSZR.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.ToTable("pedido");
                });

            modelBuilder.Entity("apiTSZR.Models.Avaliacao", b =>
                {
                    b.HasOne("apiTSZR.Models.Cliente", "Cliente")
                        .WithOne("Avaliacao")
                        .HasForeignKey("apiTSZR.Models.Avaliacao", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("apiTSZR.Models.Cliente", b =>
                {
                    b.HasOne("apiTSZR.Models.Endereco", "Endereco")
                        .WithOne("cliente")
                        .HasForeignKey("apiTSZR.Models.Cliente", "EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("apiTSZR.Models.Disponivel", b =>
                {
                    b.HasOne("apiTSZR.Models.Equipamento", "Equipamento")
                        .WithMany()
                        .HasForeignKey("EquipamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipamento");
                });

            modelBuilder.Entity("apiTSZR.Models.Doacao", b =>
                {
                    b.HasOne("apiTSZR.Models.Disponivel", "Equipamento")
                        .WithOne("Doacao")
                        .HasForeignKey("apiTSZR.Models.Doacao", "EquipamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiTSZR.Models.Pedido", "Pedido")
                        .WithOne("Doacao")
                        .HasForeignKey("apiTSZR.Models.Doacao", "PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipamento");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("apiTSZR.Models.Equipamento", b =>
                {
                    b.HasOne("apiTSZR.Models.Avaliacao", "Avaliacao")
                        .WithMany()
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apiTSZR.Models.AssistenciaTec", "Tec")
                        .WithMany("Equipamentos")
                        .HasForeignKey("TecId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliacao");

                    b.Navigation("Tec");
                });

            modelBuilder.Entity("apiTSZR.Models.Pedido", b =>
                {
                    b.HasOne("apiTSZR.Models.Avaliacao", "Avaliacao")
                        .WithMany()
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("apiTSZR.Models.AssistenciaTec", b =>
                {
                    b.Navigation("Equipamentos");
                });

            modelBuilder.Entity("apiTSZR.Models.Cliente", b =>
                {
                    b.Navigation("Avaliacao")
                        .IsRequired();
                });

            modelBuilder.Entity("apiTSZR.Models.Disponivel", b =>
                {
                    b.Navigation("Doacao")
                        .IsRequired();
                });

            modelBuilder.Entity("apiTSZR.Models.Endereco", b =>
                {
                    b.Navigation("cliente")
                        .IsRequired();
                });

            modelBuilder.Entity("apiTSZR.Models.Pedido", b =>
                {
                    b.Navigation("Doacao")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
